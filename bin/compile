#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

### Constants

# This is used by the buildpack stdlib for metrics
# shellcheck disable=SC2034
BPLOG_PREFIX="buildpack.ocaml"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies

# shellcheck source=lib/vendor/stdlib_v7.sh
source "$BP_DIR/lib/vendor/stdlib_v7.sh"
# shellcheck source=lib/output.sh
source "$BP_DIR/lib/output.sh"
# shellcheck source=lib/monitor.sh
source "$BP_DIR/lib/monitor.sh"
# shellcheck source=lib/environment.sh
source "$BP_DIR/lib/environment.sh"
# shellcheck source=lib/failure.sh
source "$BP_DIR/lib/failure.sh"
# shellcheck source=lib/binaries.sh
source "$BP_DIR/lib/binaries.sh"
# shellcheck source=lib/json.sh
source "$BP_DIR/lib/json.sh"
# shellcheck source=lib/cache.sh
source "$BP_DIR/lib/cache.sh"
# shellcheck source=lib/dependencies.sh
source "$BP_DIR/lib/dependencies.sh"
# shellcheck source=lib/plugin.sh
source "$BP_DIR/lib/plugin.sh"
# shellcheck source=lib/uuid.sh
source "$BP_DIR/lib/uuid.sh"
# shellcheck source=lib/kvstore.sh
source "$BP_DIR/lib/kvstore.sh"
# shellcheck source=lib/metadata.sh
source "$BP_DIR/lib/metadata.sh"
# shellcheck source=lib/features.sh
source "$BP_DIR/lib/features.sh"
# shellcheck source=lib/builddata.sh
source "$BP_DIR/lib/builddata.sh"
# shellcheck source=lib/yarn-2.sh
source "$BP_DIR/lib/yarn-2.sh"

export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

build_start_time=$(nowms)

### Handle errors

handle_failure() {
  meta_set "node-build-success" "false"
  header "Build failed"
  fail_using_yarn2_with_yarn_production_environment_variable_set "$LOG_FILE"
  fail_yarn_outdated "$LOG_FILE"
  fail_yarn_lockfile_outdated "$LOG_FILE"
  fail_node_install "$LOG_FILE" "$BUILD_DIR"
  fail_yarn_install "$LOG_FILE" "$BUILD_DIR"
  fail_invalid_semver "$LOG_FILE"
  log_other_failures "$LOG_FILE"
  warn_aws_proxy "$BUILD_DIR"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE" "$BUILD_DIR"
  warn_econnreset "$LOG_FILE"
  log_meta_data >> "$BUILDPACK_LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Initalize metadata store
# Create the metadata store
meta_init "$CACHE_DIR"
# Make sure that it's empty and save any previous build's data
meta_setup
# the "build-step" key keeps track of where we are in the execution
# so that we can see where failed builds errored
meta_set "build-step" "init"

### Check initial state

[ -f "$BUILD_DIR/esy.json" ] && ESY=true || ESY=false

### Save build info
features_init "ocaml" "$BUILD_DIR" "$CACHE_DIR" "$BP_DIR/features"
log_initial_state
generate_uuids

### Failures that should be caught immediately

fail_dot_heroku "$BUILD_DIR"
fail_dot_heroku_node "$BUILD_DIR"
fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"

### Gather more project information

# we know that package.json is valid json, and can pull more data out
log_project_info "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env "$BUILD_DIR"
}

header "Creating runtime environment" | output "$LOG_FILE"

mkdir -p "$BUILD_DIR/.heroku/node/"
cd "$BUILD_DIR"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"
create_build_env


### Configure vendored package manager
export VENDOR_PATH

### Configure package manager cache directories
[ ! "$NPM_CONFIG_CACHE" ] && NPM_CONFIG_CACHE=$(mktemp -d -t npmcache.XXXXX)
export NPM_CONFIG_CACHE

install_bins() {
  local node_engine npm_engine pnpm_engine npm_version node_version

  node_engine=$(read_json "$BUILD_DIR/esy.json" ".engines.node")
  npm_engine=$(read_json "$BUILD_DIR/esy.json" ".engines.npm")
  pnpm_engine=$(read_json "$BUILD_DIR/esy.json" ".engines.pnpm")

  meta_set "node-version-request" "$node_engine"
  meta_set "npm-version-request" "$npm_engine"
  meta_set "pnpm-version-request" "$pnpm_engine"

  echo "engines.node (esy.json):  ${node_engine:-unspecified}"
  echo "engines.npm (esy.json):   ${npm_engine:-unspecified (use default)}"
  echo "engines.pnpm (esy.json):   ${pnpm_engine:-unspecified (use default)}"
  echo ""

  warn_node_engine "$node_engine"

  meta_set "build-step" "install-nodejs"
  monitor "install-node-binary" install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"

  meta_set "build-step" "install-npm"
  monitor "install-npm-binary" install_npm "$npm_engine" "$BUILD_DIR/.heroku/node" $NPM_LOCK

  meta_set "build-step" "install-pnpm"
  monitor "install-pnpm-binary" install_pnpm "$pnpm_engine"

  node_version="$(node --version)"
  mcount "version.node.$node_version"
  meta_set "node-version" "$node_version"

  mcount "version.npm.$(npm --version)"
  meta_set "npm-version" "$(npm --version)"

  mcount "version.pnpm.$(pnpm --version)"
  meta_set "pnpm-version" "$(pnpm --version)"

  warn_old_npm
}

header "Installing binaries" | output "$LOG_FILE"
install_bins | output "$LOG_FILE"

restore_cache() {
  local cache_status cache_directories restore_cache_start_time
  restore_cache_start_time=$(nowms)

  cache_status="$(get_cache_status "$CACHE_DIR")"
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because NODE_MODULES_CACHE=${NODE_MODULES_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$NPM_CONFIG_CACHE"
    else
      restore_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
    fi
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      echo "Cached directories were not restored due to a change in version of node, npm, yarn or stack"
      echo "Module installation may take longer for this build"
    else
      # If the user has specified custom cache directories, be more explicit
      echo "Invalidating cache due to a change in version of node, npm or stack"
      echo "Will not restore the following directories for this build:"
      for directory in $cache_directories; do
        echo "  $directory"
      done
    fi
  else
    # No cache exists, be silent
    :
  fi

  mcount "cache.$cache_status"
  meta_set "cache-status" "$cache_status"
  meta_time "restore-cache-time" "$restore_cache_start_time"
}

meta_set "build-step" "restore-cache"
restore_cache | output "$LOG_FILE"

build_dependencies() {
  local cache_status start

  cache_status="$(get_cache_status "$CACHE_DIR")"
  start=$(nowms)
  npm_node_modules "$BUILD_DIR"

  mtime "modules.time.cache.$cache_status" "${start}"

  meta_set "build-step" "build-script"
  header "Build"
  run_build_script "$BUILD_DIR"
}

meta_set "build-step" "install-dependencies"
log_build_scripts "$BUILD_DIR"
run_prebuild_script "$BUILD_DIR" | output "$LOG_FILE"
header "Installing dependencies" | output "$LOG_FILE"
build_dependencies | output "$LOG_FILE"

cache_build() {
  local cache_directories cache_build_start_time
  cache_build_start_time=$(nowms)
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  clear_cache "$CACHE_DIR"
  if ! ${NODE_MODULES_CACHE:-true}; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  elif [[ "$cache_directories" == "" ]]; then
    header "Caching build"
    save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$NPM_CONFIG_CACHE"
  else
    header "Caching build"
    save_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
  fi
  save_signature "$CACHE_DIR"
  meta_time "save-cache-time" "$cache_build_start_time"
}

prune_devdependencies() {
  npm_prune_devdependencies "$BUILD_DIR"
}

meta_set "build-step" "save-cache"
cache_build | output "$LOG_FILE"
meta_set "build-step" "prune-dependencies"
header "Pruning devDependencies" | output "$LOG_FILE"
prune_devdependencies | output "$LOG_FILE"

meta_set "build-step" "cleanup-script"
run_cleanup_script "$BUILD_DIR" | output "$LOG_FILE"

summarize_build() {
  if $NODE_VERBOSE; then
    list_dependencies "$BUILD_DIR"
  fi

  mmeasure 'modules.size' "$(measure_size)"
  meta_set "node-modules-size" "$(measure_size)"
}

meta_set "build-step" "install-metrics-plugin"
install_plugin "$BP_DIR" "$BUILD_DIR"

meta_set "build-step" "summarize"
header "Build succeeded!" | output "$LOG_FILE"
mcount "compile"
summarize_build | output "$LOG_FILE"
meta_set "node-build-success" "true"
meta_time "build-time" "$build_start_time"

warn_no_start "$BUILD_DIR"
warn_unmet_dep "$LOG_FILE"
warn_old_npm_lockfile $NPM_LOCK

meta_set "build-step" "finished"
log_meta_data >> "$BUILDPACK_LOG_FILE"
